/* |UNID#T#32|FECHAINICIO#F#|FECHAFIN#F#|TITULO#T#80|PERSONACONTACTO#T#30|TELEFONO#T#20|OBSERVACIONES#T#3250|URLIMAGEN#T#20|FORM#T#10|ID#T#10|EXPORTACION#T#10|ESPECIFICACIONES#T#50| */ 
package es.carm.mydom.DAO;

import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;import es.carm.mydom.entity.AttachService;import es.carm.mydom.entity.Attachment;import es.carm.mydom.entity.Database;import es.carm.mydom.entity.Document;import es.carm.mydom.entity.DominoSession;import es.carm.mydom.entity.DominoSessionImpl;import es.carm.mydom.entity.ServerDao;import es.carm.mydom.entity.View;import es.carm.mydom.filters.utils.AgentResponse;import es.carm.mydom.filters.utils.Dispatcher;import es.carm.mydom.filters.utils.Resources;import es.carm.mydom.parser.BeanMethod;import es.carm.mydom.parser.Field;import es.carm.mydom.parser.HTMLCompiler;import es.carm.mydom.parser.HTMLProgram;import es.carm.mydom.parser.ParserException;import es.carm.mydom.parser.ProgramContext;import es.carm.mydom.parser.ViewDef;import es.carm.mydom.servlet.ServerConfig;import es.carm.mydom.utils.HttpServletUtils;import es.carm.mydom.utils.UNIDGenerator;
import org.apache.naming.resources.Resource;import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class LotusDaoImpl implements Database {	final static Logger log = LoggerFactory.getLogger(LotusDaoImpl.class);	private String name;	private AttachService attachService;
	private LotusMapper lotusMapper;	private String listaExclusion;	private Map<String,String> alias;	private ServerDao serverDao;		public LotusDaoImpl(){		this.alias = new HashMap<String,String>();	}	public Map<String, String> getAlias() {		return alias;	}	public void setAlias(Map<String, String> alias) {		log.debug("#### LotusDAOImpl set alias:");		for(String key:alias.keySet()){			log.debug(key+"="+alias.get(key));		}		this.alias = alias;	}	public String getName() {		return name;	}	public void setName(String name) {		this.name = name;	}	public String getListaExclusion() {		return listaExclusion;	}	public void setListaExclusion(String listaExclusion) {		this.listaExclusion = listaExclusion.toLowerCase();	}	public LotusMapper getLotusMapper() {		return lotusMapper;	}	public void setLotusMapper(LotusMapper lotusMapper) {		this.lotusMapper = lotusMapper;	}	public void setAttachService(AttachService attachService) {		this.attachService = attachService;	}	public ServerDao getServerDao() {		return serverDao;	}	public void setServerDao(ServerDao serverDao) {		this.serverDao = serverDao;	}		//******************************************************	//METODOS DE IMPLEMENTACION DE DATABASE	//******************************************************	public String canonice(String tableName){		if (tableName==null) return null;		if (tableName.equals("")) return null;		String res = tableName;		if (res.startsWith("/")) res=res.substring(1);		if (alias.containsKey(res.toLowerCase())) res = alias.get(res.toLowerCase());		res=res.replace(" ","_");		log.debug("#### Canonice:"+tableName+"->"+res);		for(String key:alias.keySet()){			log.debug(key+"="+alias.get(key));		}		return res;	}		public Document getNewDocument() throws DatabaseException {		log.debug("Database.newDocument.");		String unid = UNIDGenerator.getUNID();		Document doc = new Document();		doc.setUnid(unid);		doc.setModified(false);		doc.setNewDocument(true);		return doc;	}	public boolean isDocumentByUnid(String tableName,String unid){		if (tableName==null) tableName="UNID";		return lotusMapper.isByUnid(canonice(tableName),unid)!=null;	}	public Document getDocumentByUnid(String tableName,String unid) throws DatabaseException {		if (tableName==null) {			Map<String,Object> is = lotusMapper.isByUnid("UNID",unid);			if (is==null) return null;			tableName = (String) is.get("FORM");		}		Document doc = new Document();		try {			doc.setItems(lotusMapper.get(canonice(tableName),unid));		} catch (SQLException e) {			e.printStackTrace();			throw new DatabaseException(e.getMessage());		}		return doc;	}		private String getCombinedListaExclusion(String formName){		String res = this.listaExclusion+",";		List<Field> fields = serverDao.getForm(formName);		if (fields!=null){			for(Field f:fields){				if (f.getItemKind()==Field.KIND_COMPUTED_FOR_DISPLAY) res+=f.getItemName().toLowerCase()+",";			}		}		return res;	}	public void insert(String tableName,Document data) throws DatabaseException {		//primero debo COMPROBAR QUE NO EXISTA el documento por UNID		if (isDocumentByUnid(tableName, data.getUnid())) throw new DatabaseException("Error en insert. El unid "+data.getUnid()+" ya existe.");		if (tableName==null) {			Map<String,Object> is = lotusMapper.isByUnid("UNID",data.getUnid());			if (is==null) throw new DatabaseException("Error en insert. No se puede obtener el form a partir del unid: "+data.getUnid());			tableName = (String) is.get("FORM");		}		lotusMapper.insert(canonice(tableName), data.getItems(),getCombinedListaExclusion(tableName));		//ahora toca el turno a los attachments		if (data.hasAttachments()){			for(Attachment attach:data.getAttachments()){				attachService.addAttachment(data.getUnid(), attach);			}		}	}	public void update(String tableName,Document data) throws DatabaseException {		if (!isDocumentByUnid(tableName, data.getUnid())) throw new DatabaseException("Error en update. El unid "+data.getUnid()+" NO existe.");		if (tableName==null) {			Map<String,Object> is = lotusMapper.isByUnid("UNID",data.getUnid());			if (is==null) throw new DatabaseException("Error en update. No se puede obtener el form a partir del unid: "+data.getUnid());			tableName = (String) is.get("FORM");		}		lotusMapper.update(canonice(tableName),data.getItems(),getCombinedListaExclusion(tableName));		//ahora toca el turno a los attachments		if (data.hasAttachments()){			for(Attachment attach:data.getAttachments()){				attachService.addAttachment(data.getUnid(), attach);			}		}	}	public void save(String tableName,Document data) throws DatabaseException {		if (tableName==null) {			Map<String,Object> is = lotusMapper.isByUnid("UNID",data.getUnid());			if (is==null) throw new DatabaseException("Error en save. No se puede obtener el form a partir del unid: "+data.getUnid());			tableName = (String) is.get("FORM");		}		if (isDocumentByUnid(tableName, data.getUnid())) {			lotusMapper.update(canonice(tableName),data.getItems(),getCombinedListaExclusion(tableName));		} else {			lotusMapper.insert(canonice(tableName), data.getItems(),getCombinedListaExclusion(tableName));		}	}	public void deleteByUnid(String tableName,String unid) throws DatabaseException {		if (tableName==null) {			Map<String,Object> is = lotusMapper.isByUnid("UNID",unid);			if (is==null) throw new DatabaseException("Error en delete. No se puede obtener el form a partir del unid: "+unid);			tableName = (String) is.get("FORM");		}		lotusMapper.delete(canonice(tableName), unid);		//ahora toca el turno a los attachments		attachService.deleteAllAttachments(unid);	}	public List<Document> getAll(String tableName) throws DatabaseException {		//TODO hacer una implementacion mejor		List<Document> lst = new ArrayList<Document>();		List<Map<String,Object>> lobj = lotusMapper.getAll(canonice(tableName));		for(Map<String,Object> map:lobj){			Document doc = new Document();			try {				doc.setItems(map);			} catch (SQLException e) {				e.printStackTrace();				throw new DatabaseException(e.getMessage());			}			lst.add(doc);		}		return lst;	}	public List<Document> getPage(String tableName, int page, int pageSize, String sortOrder, String where) throws DatabaseException {		//TODO hacer una implementacion mejor		List<Document> lst = new ArrayList<Document>();		List<Map<String,Object>> lobj = lotusMapper.getPage(canonice(tableName), page, pageSize, sortOrder, where);		for(Map<String,Object> map:lobj){			Document doc = new Document();			try {				doc.setItems(map);			} catch (SQLException e) {				e.printStackTrace();				throw new DatabaseException(e.getMessage());			}			lst.add(doc);		}		return lst;	}	public int getCount(String tableName, String where) {		return lotusMapper.getCount(canonice(tableName), where);	}	public List<Document> getAllDocumentByKey(String tableName, Object keys) throws DatabaseException {		List<Document> lst = new ArrayList<Document>();		List<Map<String,Object>> lobj = lotusMapper.getAllDocumentByKey(canonice(tableName),keys);		for(Map<String,Object> map:lobj){			Document doc = new Document();			try {				doc.setItems(map);			} catch (SQLException e) {				e.printStackTrace();				throw new DatabaseException(e.getMessage());			}			lst.add(doc);		}		return lst;	}	public Document getDocumentByKey(String tableName, Object keys) throws DatabaseException {		Map<String,Object> map = lotusMapper.getDocumentByKey(canonice(tableName),keys);		if (map==null) return null;		Document doc = new Document();		try {			doc.setItems(map);		} catch (SQLException e) {			e.printStackTrace();			throw new DatabaseException(e.getMessage());		}		return doc;	}			public View getView(DominoSession domSession, String name) throws DatabaseException {		try {			ViewDef viewDef = domSession.getViewDef(name);			return new ViewDaoImpl(lotusMapper, this, domSession, viewDef);		} catch (ParserException e) {			e.printStackTrace();			throw new DatabaseException(e.getMessage());		}	}	public AttachService getAttachService() throws DatabaseException {		return this.attachService;	}	public void computeWithForm(DominoSession domSession,String formName, Document data) throws DatabaseException {		// TODO Comprobar que funciona		Document docCtx = domSession.getDocumentContext();		domSession.setDocumentContext(data);		List<Field> fields = serverDao.getForm(formName);		for(Field field:fields){			BeanMethod beanMethod = field.getDefaultValue();			int kind = field.getItemKind();			//solo si NO es editable			if (kind!=Field.KIND_EDITABLE){				try {					data.setItem(field.getItemName(), domSession.executeGet(beanMethod));				} catch (ParserException e) {					throw new DatabaseException(e.getMessage());				}			}		}		domSession.setDocumentContext(docCtx);	}}

